// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Games.TLBB.Table.Static
{

using global::System;
using global::FlatBuffers;
using System.Collections.Generic;

public struct MonsterAttrTableVO : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static MonsterAttrTableVO GetRootAsMonsterAttrTableVO(ByteBuffer _bb) { return GetRootAsMonsterAttrTableVO(_bb, new MonsterAttrTableVO()); }
  public static MonsterAttrTableVO GetRootAsMonsterAttrTableVO(ByteBuffer _bb, MonsterAttrTableVO obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public MonsterAttrTableVO __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
  public int Sex { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Level { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Exp { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Friendly { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RelaxTime { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BaseAI { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ExtendAI { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Camp { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DropRadio { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Tmp { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float MinBlood { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int IsInteraction { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int IsBoss { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PhyAttack { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PhyDefense { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MagicAttack { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MagicDefense { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int HPLimit { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MPLimit { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int HPRevert { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MPRevert { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int HitRate { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DodgeRate { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int HuiXinRate { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int HuiXinDefense { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MoveSpeed { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int WalkSpeed { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int AttackSpeed { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int IceAttack { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int IceDefense { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int IceLowerTarget { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FireAttack { get { int o = __p.__offset(70); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FireDefense { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FireLowerTarget { get { int o = __p.__offset(74); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EleAttack { get { int o = __p.__offset(76); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EleDefense { get { int o = __p.__offset(78); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EleLowerTarget { get { int o = __p.__offset(80); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PoisonAttack { get { int o = __p.__offset(82); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PoisonDefense { get { int o = __p.__offset(84); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PoisonLowerTarget { get { int o = __p.__offset(86); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ImmuneMomentID { get { int o = __p.__offset(88); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ImmuneContinueID { get { int o = __p.__offset(90); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ModelID { get { int o = __p.__offset(92); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int IsHeader { get { int o = __p.__offset(94); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DirType { get { int o = __p.__offset(96); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float NameHeight { get { int o = __p.__offset(98); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float CircleSize { get { int o = __p.__offset(100); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float ShadowSize { get { int o = __p.__offset(102); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int HeaderID { get { int o = __p.__offset(104); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int AttackTime { get { int o = __p.__offset(106); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int AttackCD { get { int o = __p.__offset(108); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxLv { get { int o = __p.__offset(110); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxExp { get { int o = __p.__offset(112); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxAtt { get { int o = __p.__offset(114); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxDef { get { int o = __p.__offset(116); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxMag { get { int o = __p.__offset(118); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxRes { get { int o = __p.__offset(120); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxHP { get { int o = __p.__offset(122); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int IsInMinimap { get { int o = __p.__offset(124); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ForceID { get { int o = __p.__offset(126); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int AttackAttribeID { get { int o = __p.__offset(128); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int IsAttackNPC { get { int o = __p.__offset(130); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int IsPlayAction { get { int o = __p.__offset(132); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ViewType { get { int o = __p.__offset(134); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int IntensityType { get { int o = __p.__offset(136); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int InteractiveType { get { int o = __p.__offset(138); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ActiveCD { get { int o = __p.__offset(140); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CombatType { get { int o = __p.__offset(142); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SpecialActionTime { get { int o = __p.__offset(144); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TriggerSkillID { get { int o = __p.__offset(146); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int HitFly { get { int o = __p.__offset(148); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BodyID { get { int o = __p.__offset(150); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SpecialBirth { get { int o = __p.__offset(152); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SpecialActionID { get { int o = __p.__offset(154); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int NSwearValue { get { int o = __p.__offset(156); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int IsCount { get { int o = __p.__offset(158); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int NLoveValue { get { int o = __p.__offset(160); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int IsRobot { get { int o = __p.__offset(162); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<MonsterAttrTableVO> CreateMonsterAttrTableVO(FlatBufferBuilder builder,
      int Id = 0,
      StringOffset NameOffset = default(StringOffset),
      int Sex = 0,
      int Level = 0,
      int Exp = 0,
      int Friendly = 0,
      int RelaxTime = 0,
      int BaseAI = 0,
      int ExtendAI = 0,
      int Camp = 0,
      int DropRadio = 0,
      int Tmp = 0,
      float MinBlood = 0.0f,
      int IsInteraction = 0,
      int IsBoss = 0,
      int PhyAttack = 0,
      int PhyDefense = 0,
      int MagicAttack = 0,
      int MagicDefense = 0,
      int HPLimit = 0,
      int MPLimit = 0,
      int HPRevert = 0,
      int MPRevert = 0,
      int HitRate = 0,
      int DodgeRate = 0,
      int HuiXinRate = 0,
      int HuiXinDefense = 0,
      int MoveSpeed = 0,
      int WalkSpeed = 0,
      int AttackSpeed = 0,
      int IceAttack = 0,
      int IceDefense = 0,
      int IceLowerTarget = 0,
      int FireAttack = 0,
      int FireDefense = 0,
      int FireLowerTarget = 0,
      int EleAttack = 0,
      int EleDefense = 0,
      int EleLowerTarget = 0,
      int PoisonAttack = 0,
      int PoisonDefense = 0,
      int PoisonLowerTarget = 0,
      int ImmuneMomentID = 0,
      int ImmuneContinueID = 0,
      int ModelID = 0,
      int IsHeader = 0,
      int DirType = 0,
      float NameHeight = 0.0f,
      float CircleSize = 0.0f,
      float ShadowSize = 0.0f,
      int HeaderID = 0,
      int AttackTime = 0,
      int AttackCD = 0,
      int MaxLv = 0,
      int MaxExp = 0,
      int MaxAtt = 0,
      int MaxDef = 0,
      int MaxMag = 0,
      int MaxRes = 0,
      int MaxHP = 0,
      int IsInMinimap = 0,
      int ForceID = 0,
      int AttackAttribeID = 0,
      int IsAttackNPC = 0,
      int IsPlayAction = 0,
      int ViewType = 0,
      int IntensityType = 0,
      int InteractiveType = 0,
      int ActiveCD = 0,
      int CombatType = 0,
      int SpecialActionTime = 0,
      int TriggerSkillID = 0,
      int hitFly = 0,
      int bodyID = 0,
      int SpecialBirth = 0,
      int SpecialActionID = 0,
      int nSwearValue = 0,
      int IsCount = 0,
      int nLoveValue = 0,
      int IsRobot = 0) {
    builder.StartObject(80);
    MonsterAttrTableVO.AddIsRobot(builder, IsRobot);
    MonsterAttrTableVO.AddNLoveValue(builder, nLoveValue);
    MonsterAttrTableVO.AddIsCount(builder, IsCount);
    MonsterAttrTableVO.AddNSwearValue(builder, nSwearValue);
    MonsterAttrTableVO.AddSpecialActionID(builder, SpecialActionID);
    MonsterAttrTableVO.AddSpecialBirth(builder, SpecialBirth);
    MonsterAttrTableVO.AddBodyID(builder, bodyID);
    MonsterAttrTableVO.AddHitFly(builder, hitFly);
    MonsterAttrTableVO.AddTriggerSkillID(builder, TriggerSkillID);
    MonsterAttrTableVO.AddSpecialActionTime(builder, SpecialActionTime);
    MonsterAttrTableVO.AddCombatType(builder, CombatType);
    MonsterAttrTableVO.AddActiveCD(builder, ActiveCD);
    MonsterAttrTableVO.AddInteractiveType(builder, InteractiveType);
    MonsterAttrTableVO.AddIntensityType(builder, IntensityType);
    MonsterAttrTableVO.AddViewType(builder, ViewType);
    MonsterAttrTableVO.AddIsPlayAction(builder, IsPlayAction);
    MonsterAttrTableVO.AddIsAttackNPC(builder, IsAttackNPC);
    MonsterAttrTableVO.AddAttackAttribeID(builder, AttackAttribeID);
    MonsterAttrTableVO.AddForceID(builder, ForceID);
    MonsterAttrTableVO.AddIsInMinimap(builder, IsInMinimap);
    MonsterAttrTableVO.AddMaxHP(builder, MaxHP);
    MonsterAttrTableVO.AddMaxRes(builder, MaxRes);
    MonsterAttrTableVO.AddMaxMag(builder, MaxMag);
    MonsterAttrTableVO.AddMaxDef(builder, MaxDef);
    MonsterAttrTableVO.AddMaxAtt(builder, MaxAtt);
    MonsterAttrTableVO.AddMaxExp(builder, MaxExp);
    MonsterAttrTableVO.AddMaxLv(builder, MaxLv);
    MonsterAttrTableVO.AddAttackCD(builder, AttackCD);
    MonsterAttrTableVO.AddAttackTime(builder, AttackTime);
    MonsterAttrTableVO.AddHeaderID(builder, HeaderID);
    MonsterAttrTableVO.AddShadowSize(builder, ShadowSize);
    MonsterAttrTableVO.AddCircleSize(builder, CircleSize);
    MonsterAttrTableVO.AddNameHeight(builder, NameHeight);
    MonsterAttrTableVO.AddDirType(builder, DirType);
    MonsterAttrTableVO.AddIsHeader(builder, IsHeader);
    MonsterAttrTableVO.AddModelID(builder, ModelID);
    MonsterAttrTableVO.AddImmuneContinueID(builder, ImmuneContinueID);
    MonsterAttrTableVO.AddImmuneMomentID(builder, ImmuneMomentID);
    MonsterAttrTableVO.AddPoisonLowerTarget(builder, PoisonLowerTarget);
    MonsterAttrTableVO.AddPoisonDefense(builder, PoisonDefense);
    MonsterAttrTableVO.AddPoisonAttack(builder, PoisonAttack);
    MonsterAttrTableVO.AddEleLowerTarget(builder, EleLowerTarget);
    MonsterAttrTableVO.AddEleDefense(builder, EleDefense);
    MonsterAttrTableVO.AddEleAttack(builder, EleAttack);
    MonsterAttrTableVO.AddFireLowerTarget(builder, FireLowerTarget);
    MonsterAttrTableVO.AddFireDefense(builder, FireDefense);
    MonsterAttrTableVO.AddFireAttack(builder, FireAttack);
    MonsterAttrTableVO.AddIceLowerTarget(builder, IceLowerTarget);
    MonsterAttrTableVO.AddIceDefense(builder, IceDefense);
    MonsterAttrTableVO.AddIceAttack(builder, IceAttack);
    MonsterAttrTableVO.AddAttackSpeed(builder, AttackSpeed);
    MonsterAttrTableVO.AddWalkSpeed(builder, WalkSpeed);
    MonsterAttrTableVO.AddMoveSpeed(builder, MoveSpeed);
    MonsterAttrTableVO.AddHuiXinDefense(builder, HuiXinDefense);
    MonsterAttrTableVO.AddHuiXinRate(builder, HuiXinRate);
    MonsterAttrTableVO.AddDodgeRate(builder, DodgeRate);
    MonsterAttrTableVO.AddHitRate(builder, HitRate);
    MonsterAttrTableVO.AddMPRevert(builder, MPRevert);
    MonsterAttrTableVO.AddHPRevert(builder, HPRevert);
    MonsterAttrTableVO.AddMPLimit(builder, MPLimit);
    MonsterAttrTableVO.AddHPLimit(builder, HPLimit);
    MonsterAttrTableVO.AddMagicDefense(builder, MagicDefense);
    MonsterAttrTableVO.AddMagicAttack(builder, MagicAttack);
    MonsterAttrTableVO.AddPhyDefense(builder, PhyDefense);
    MonsterAttrTableVO.AddPhyAttack(builder, PhyAttack);
    MonsterAttrTableVO.AddIsBoss(builder, IsBoss);
    MonsterAttrTableVO.AddIsInteraction(builder, IsInteraction);
    MonsterAttrTableVO.AddMinBlood(builder, MinBlood);
    MonsterAttrTableVO.AddTmp(builder, Tmp);
    MonsterAttrTableVO.AddDropRadio(builder, DropRadio);
    MonsterAttrTableVO.AddCamp(builder, Camp);
    MonsterAttrTableVO.AddExtendAI(builder, ExtendAI);
    MonsterAttrTableVO.AddBaseAI(builder, BaseAI);
    MonsterAttrTableVO.AddRelaxTime(builder, RelaxTime);
    MonsterAttrTableVO.AddFriendly(builder, Friendly);
    MonsterAttrTableVO.AddExp(builder, Exp);
    MonsterAttrTableVO.AddLevel(builder, Level);
    MonsterAttrTableVO.AddSex(builder, Sex);
    MonsterAttrTableVO.AddName(builder, NameOffset);
    MonsterAttrTableVO.AddId(builder, Id);
    return MonsterAttrTableVO.EndMonsterAttrTableVO(builder);
  }

  public static void StartMonsterAttrTableVO(FlatBufferBuilder builder) { builder.StartObject(80); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddSex(FlatBufferBuilder builder, int Sex) { builder.AddInt(2, Sex, 0); }
  public static void AddLevel(FlatBufferBuilder builder, int Level) { builder.AddInt(3, Level, 0); }
  public static void AddExp(FlatBufferBuilder builder, int Exp) { builder.AddInt(4, Exp, 0); }
  public static void AddFriendly(FlatBufferBuilder builder, int Friendly) { builder.AddInt(5, Friendly, 0); }
  public static void AddRelaxTime(FlatBufferBuilder builder, int RelaxTime) { builder.AddInt(6, RelaxTime, 0); }
  public static void AddBaseAI(FlatBufferBuilder builder, int BaseAI) { builder.AddInt(7, BaseAI, 0); }
  public static void AddExtendAI(FlatBufferBuilder builder, int ExtendAI) { builder.AddInt(8, ExtendAI, 0); }
  public static void AddCamp(FlatBufferBuilder builder, int Camp) { builder.AddInt(9, Camp, 0); }
  public static void AddDropRadio(FlatBufferBuilder builder, int DropRadio) { builder.AddInt(10, DropRadio, 0); }
  public static void AddTmp(FlatBufferBuilder builder, int Tmp) { builder.AddInt(11, Tmp, 0); }
  public static void AddMinBlood(FlatBufferBuilder builder, float MinBlood) { builder.AddFloat(12, MinBlood, 0.0f); }
  public static void AddIsInteraction(FlatBufferBuilder builder, int IsInteraction) { builder.AddInt(13, IsInteraction, 0); }
  public static void AddIsBoss(FlatBufferBuilder builder, int IsBoss) { builder.AddInt(14, IsBoss, 0); }
  public static void AddPhyAttack(FlatBufferBuilder builder, int PhyAttack) { builder.AddInt(15, PhyAttack, 0); }
  public static void AddPhyDefense(FlatBufferBuilder builder, int PhyDefense) { builder.AddInt(16, PhyDefense, 0); }
  public static void AddMagicAttack(FlatBufferBuilder builder, int MagicAttack) { builder.AddInt(17, MagicAttack, 0); }
  public static void AddMagicDefense(FlatBufferBuilder builder, int MagicDefense) { builder.AddInt(18, MagicDefense, 0); }
  public static void AddHPLimit(FlatBufferBuilder builder, int HPLimit) { builder.AddInt(19, HPLimit, 0); }
  public static void AddMPLimit(FlatBufferBuilder builder, int MPLimit) { builder.AddInt(20, MPLimit, 0); }
  public static void AddHPRevert(FlatBufferBuilder builder, int HPRevert) { builder.AddInt(21, HPRevert, 0); }
  public static void AddMPRevert(FlatBufferBuilder builder, int MPRevert) { builder.AddInt(22, MPRevert, 0); }
  public static void AddHitRate(FlatBufferBuilder builder, int HitRate) { builder.AddInt(23, HitRate, 0); }
  public static void AddDodgeRate(FlatBufferBuilder builder, int DodgeRate) { builder.AddInt(24, DodgeRate, 0); }
  public static void AddHuiXinRate(FlatBufferBuilder builder, int HuiXinRate) { builder.AddInt(25, HuiXinRate, 0); }
  public static void AddHuiXinDefense(FlatBufferBuilder builder, int HuiXinDefense) { builder.AddInt(26, HuiXinDefense, 0); }
  public static void AddMoveSpeed(FlatBufferBuilder builder, int MoveSpeed) { builder.AddInt(27, MoveSpeed, 0); }
  public static void AddWalkSpeed(FlatBufferBuilder builder, int WalkSpeed) { builder.AddInt(28, WalkSpeed, 0); }
  public static void AddAttackSpeed(FlatBufferBuilder builder, int AttackSpeed) { builder.AddInt(29, AttackSpeed, 0); }
  public static void AddIceAttack(FlatBufferBuilder builder, int IceAttack) { builder.AddInt(30, IceAttack, 0); }
  public static void AddIceDefense(FlatBufferBuilder builder, int IceDefense) { builder.AddInt(31, IceDefense, 0); }
  public static void AddIceLowerTarget(FlatBufferBuilder builder, int IceLowerTarget) { builder.AddInt(32, IceLowerTarget, 0); }
  public static void AddFireAttack(FlatBufferBuilder builder, int FireAttack) { builder.AddInt(33, FireAttack, 0); }
  public static void AddFireDefense(FlatBufferBuilder builder, int FireDefense) { builder.AddInt(34, FireDefense, 0); }
  public static void AddFireLowerTarget(FlatBufferBuilder builder, int FireLowerTarget) { builder.AddInt(35, FireLowerTarget, 0); }
  public static void AddEleAttack(FlatBufferBuilder builder, int EleAttack) { builder.AddInt(36, EleAttack, 0); }
  public static void AddEleDefense(FlatBufferBuilder builder, int EleDefense) { builder.AddInt(37, EleDefense, 0); }
  public static void AddEleLowerTarget(FlatBufferBuilder builder, int EleLowerTarget) { builder.AddInt(38, EleLowerTarget, 0); }
  public static void AddPoisonAttack(FlatBufferBuilder builder, int PoisonAttack) { builder.AddInt(39, PoisonAttack, 0); }
  public static void AddPoisonDefense(FlatBufferBuilder builder, int PoisonDefense) { builder.AddInt(40, PoisonDefense, 0); }
  public static void AddPoisonLowerTarget(FlatBufferBuilder builder, int PoisonLowerTarget) { builder.AddInt(41, PoisonLowerTarget, 0); }
  public static void AddImmuneMomentID(FlatBufferBuilder builder, int ImmuneMomentID) { builder.AddInt(42, ImmuneMomentID, 0); }
  public static void AddImmuneContinueID(FlatBufferBuilder builder, int ImmuneContinueID) { builder.AddInt(43, ImmuneContinueID, 0); }
  public static void AddModelID(FlatBufferBuilder builder, int ModelID) { builder.AddInt(44, ModelID, 0); }
  public static void AddIsHeader(FlatBufferBuilder builder, int IsHeader) { builder.AddInt(45, IsHeader, 0); }
  public static void AddDirType(FlatBufferBuilder builder, int DirType) { builder.AddInt(46, DirType, 0); }
  public static void AddNameHeight(FlatBufferBuilder builder, float NameHeight) { builder.AddFloat(47, NameHeight, 0.0f); }
  public static void AddCircleSize(FlatBufferBuilder builder, float CircleSize) { builder.AddFloat(48, CircleSize, 0.0f); }
  public static void AddShadowSize(FlatBufferBuilder builder, float ShadowSize) { builder.AddFloat(49, ShadowSize, 0.0f); }
  public static void AddHeaderID(FlatBufferBuilder builder, int HeaderID) { builder.AddInt(50, HeaderID, 0); }
  public static void AddAttackTime(FlatBufferBuilder builder, int AttackTime) { builder.AddInt(51, AttackTime, 0); }
  public static void AddAttackCD(FlatBufferBuilder builder, int AttackCD) { builder.AddInt(52, AttackCD, 0); }
  public static void AddMaxLv(FlatBufferBuilder builder, int MaxLv) { builder.AddInt(53, MaxLv, 0); }
  public static void AddMaxExp(FlatBufferBuilder builder, int MaxExp) { builder.AddInt(54, MaxExp, 0); }
  public static void AddMaxAtt(FlatBufferBuilder builder, int MaxAtt) { builder.AddInt(55, MaxAtt, 0); }
  public static void AddMaxDef(FlatBufferBuilder builder, int MaxDef) { builder.AddInt(56, MaxDef, 0); }
  public static void AddMaxMag(FlatBufferBuilder builder, int MaxMag) { builder.AddInt(57, MaxMag, 0); }
  public static void AddMaxRes(FlatBufferBuilder builder, int MaxRes) { builder.AddInt(58, MaxRes, 0); }
  public static void AddMaxHP(FlatBufferBuilder builder, int MaxHP) { builder.AddInt(59, MaxHP, 0); }
  public static void AddIsInMinimap(FlatBufferBuilder builder, int IsInMinimap) { builder.AddInt(60, IsInMinimap, 0); }
  public static void AddForceID(FlatBufferBuilder builder, int ForceID) { builder.AddInt(61, ForceID, 0); }
  public static void AddAttackAttribeID(FlatBufferBuilder builder, int AttackAttribeID) { builder.AddInt(62, AttackAttribeID, 0); }
  public static void AddIsAttackNPC(FlatBufferBuilder builder, int IsAttackNPC) { builder.AddInt(63, IsAttackNPC, 0); }
  public static void AddIsPlayAction(FlatBufferBuilder builder, int IsPlayAction) { builder.AddInt(64, IsPlayAction, 0); }
  public static void AddViewType(FlatBufferBuilder builder, int ViewType) { builder.AddInt(65, ViewType, 0); }
  public static void AddIntensityType(FlatBufferBuilder builder, int IntensityType) { builder.AddInt(66, IntensityType, 0); }
  public static void AddInteractiveType(FlatBufferBuilder builder, int InteractiveType) { builder.AddInt(67, InteractiveType, 0); }
  public static void AddActiveCD(FlatBufferBuilder builder, int ActiveCD) { builder.AddInt(68, ActiveCD, 0); }
  public static void AddCombatType(FlatBufferBuilder builder, int CombatType) { builder.AddInt(69, CombatType, 0); }
  public static void AddSpecialActionTime(FlatBufferBuilder builder, int SpecialActionTime) { builder.AddInt(70, SpecialActionTime, 0); }
  public static void AddTriggerSkillID(FlatBufferBuilder builder, int TriggerSkillID) { builder.AddInt(71, TriggerSkillID, 0); }
  public static void AddHitFly(FlatBufferBuilder builder, int hitFly) { builder.AddInt(72, hitFly, 0); }
  public static void AddBodyID(FlatBufferBuilder builder, int bodyID) { builder.AddInt(73, bodyID, 0); }
  public static void AddSpecialBirth(FlatBufferBuilder builder, int SpecialBirth) { builder.AddInt(74, SpecialBirth, 0); }
  public static void AddSpecialActionID(FlatBufferBuilder builder, int SpecialActionID) { builder.AddInt(75, SpecialActionID, 0); }
  public static void AddNSwearValue(FlatBufferBuilder builder, int nSwearValue) { builder.AddInt(76, nSwearValue, 0); }
  public static void AddIsCount(FlatBufferBuilder builder, int IsCount) { builder.AddInt(77, IsCount, 0); }
  public static void AddNLoveValue(FlatBufferBuilder builder, int nLoveValue) { builder.AddInt(78, nLoveValue, 0); }
  public static void AddIsRobot(FlatBufferBuilder builder, int IsRobot) { builder.AddInt(79, IsRobot, 0); }
  public static Offset<MonsterAttrTableVO> EndMonsterAttrTableVO(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<MonsterAttrTableVO>(o);
  }
};


}
