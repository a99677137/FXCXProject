// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Games.TLBB.Table.Static
{

using global::System;
using global::FlatBuffers;
using System.Collections.Generic;

public struct EmotionVO : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static EmotionVO GetRootAsEmotionVO(ByteBuffer _bb) { return GetRootAsEmotionVO(_bb, new EmotionVO()); }
  public static EmotionVO GetRootAsEmotionVO(ByteBuffer _bb, EmotionVO obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public EmotionVO __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string AtlasPath { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetAtlasPathBytes() { return __p.__vector_as_arraysegment(6); }
  public string SpriteName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetSpriteNameBytes() { return __p.__vector_as_arraysegment(8); }
  public string ExpressName { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetExpressNameBytes() { return __p.__vector_as_arraysegment(10); }
  public string Show { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetShowBytes() { return __p.__vector_as_arraysegment(12); }
  public int SptMaxNum { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ExpressType { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Unlock { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Long { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Wide { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int IsBigEmotion { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Fps { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<EmotionVO> CreateEmotionVO(FlatBufferBuilder builder,
      int Id = 0,
      StringOffset AtlasPathOffset = default(StringOffset),
      StringOffset SpriteNameOffset = default(StringOffset),
      StringOffset ExpressNameOffset = default(StringOffset),
      StringOffset ShowOffset = default(StringOffset),
      int sptMaxNum = 0,
      int ExpressType = 0,
      int Unlock = 0,
      int Long = 0,
      int Wide = 0,
      int IsBigEmotion = 0,
      int Fps = 0) {
    builder.StartObject(12);
    EmotionVO.AddFps(builder, Fps);
    EmotionVO.AddIsBigEmotion(builder, IsBigEmotion);
    EmotionVO.AddWide(builder, Wide);
    EmotionVO.AddLong(builder, Long);
    EmotionVO.AddUnlock(builder, Unlock);
    EmotionVO.AddExpressType(builder, ExpressType);
    EmotionVO.AddSptMaxNum(builder, sptMaxNum);
    EmotionVO.AddShow(builder, ShowOffset);
    EmotionVO.AddExpressName(builder, ExpressNameOffset);
    EmotionVO.AddSpriteName(builder, SpriteNameOffset);
    EmotionVO.AddAtlasPath(builder, AtlasPathOffset);
    EmotionVO.AddId(builder, Id);
    return EmotionVO.EndEmotionVO(builder);
  }

  public static void StartEmotionVO(FlatBufferBuilder builder) { builder.StartObject(12); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddAtlasPath(FlatBufferBuilder builder, StringOffset AtlasPathOffset) { builder.AddOffset(1, AtlasPathOffset.Value, 0); }
  public static void AddSpriteName(FlatBufferBuilder builder, StringOffset SpriteNameOffset) { builder.AddOffset(2, SpriteNameOffset.Value, 0); }
  public static void AddExpressName(FlatBufferBuilder builder, StringOffset ExpressNameOffset) { builder.AddOffset(3, ExpressNameOffset.Value, 0); }
  public static void AddShow(FlatBufferBuilder builder, StringOffset ShowOffset) { builder.AddOffset(4, ShowOffset.Value, 0); }
  public static void AddSptMaxNum(FlatBufferBuilder builder, int sptMaxNum) { builder.AddInt(5, sptMaxNum, 0); }
  public static void AddExpressType(FlatBufferBuilder builder, int ExpressType) { builder.AddInt(6, ExpressType, 0); }
  public static void AddUnlock(FlatBufferBuilder builder, int Unlock) { builder.AddInt(7, Unlock, 0); }
  public static void AddLong(FlatBufferBuilder builder, int Long) { builder.AddInt(8, Long, 0); }
  public static void AddWide(FlatBufferBuilder builder, int Wide) { builder.AddInt(9, Wide, 0); }
  public static void AddIsBigEmotion(FlatBufferBuilder builder, int IsBigEmotion) { builder.AddInt(10, IsBigEmotion, 0); }
  public static void AddFps(FlatBufferBuilder builder, int Fps) { builder.AddInt(11, Fps, 0); }
  public static Offset<EmotionVO> EndEmotionVO(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<EmotionVO>(o);
  }
};


}
