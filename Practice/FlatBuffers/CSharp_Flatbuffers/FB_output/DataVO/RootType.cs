// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace DataVO
{

using global::System;
using global::FlatBuffers;

public struct RootType : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static RootType GetRootAsRootType(ByteBuffer _bb) { return GetRootAsRootType(_bb, new RootType()); }
  public static RootType GetRootAsRootType(ByteBuffer _bb, RootType obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public RootType __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Person? Items(int j) { int o = __p.__offset(4); return o != 0 ? (Person?)(new Person()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ItemsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int Stateid { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long Time { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<RootType> CreateRootType(FlatBufferBuilder builder,
      VectorOffset itemsOffset = default(VectorOffset),
      int stateid = 0,
      long time = 0) {
    builder.StartObject(3);
    RootType.AddTime(builder, time);
    RootType.AddStateid(builder, stateid);
    RootType.AddItems(builder, itemsOffset);
    return RootType.EndRootType(builder);
  }

  public static void StartRootType(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddItems(FlatBufferBuilder builder, VectorOffset itemsOffset) { builder.AddOffset(0, itemsOffset.Value, 0); }
  public static VectorOffset CreateItemsVector(FlatBufferBuilder builder, Offset<Person>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartItemsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddStateid(FlatBufferBuilder builder, int stateid) { builder.AddInt(1, stateid, 0); }
  public static void AddTime(FlatBufferBuilder builder, long time) { builder.AddLong(2, time, 0); }
  public static Offset<RootType> EndRootType(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<RootType>(o);
  }
  public static void FinishRootTypeBuffer(FlatBufferBuilder builder, Offset<RootType> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedRootTypeBuffer(FlatBufferBuilder builder, Offset<RootType> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
