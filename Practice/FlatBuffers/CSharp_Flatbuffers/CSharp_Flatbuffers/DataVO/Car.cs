// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Fltest
{

using global::System;
using global::FlatBuffers;

public struct Car : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Car GetRootAsCar(ByteBuffer _bb) { return GetRootAsCar(_bb, new Car()); }
  public static Car GetRootAsCar(ByteBuffer _bb, Car obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Car __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long Number { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string Describle { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetDescribleBytes() { return __p.__vector_as_arraysegment(8); }

  public static Offset<Car> CreateCar(FlatBufferBuilder builder,
      int id = 0,
      long number = 0,
      StringOffset describleOffset = default(StringOffset)) {
    builder.StartObject(3);
    Car.AddNumber(builder, number);
    Car.AddDescrible(builder, describleOffset);
    Car.AddId(builder, id);
    return Car.EndCar(builder);
  }

  public static void StartCar(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddNumber(FlatBufferBuilder builder, long number) { builder.AddLong(1, number, 0); }
  public static void AddDescrible(FlatBufferBuilder builder, StringOffset describleOffset) { builder.AddOffset(2, describleOffset.Value, 0); }
  public static Offset<Car> EndCar(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Car>(o);
  }
};


}
