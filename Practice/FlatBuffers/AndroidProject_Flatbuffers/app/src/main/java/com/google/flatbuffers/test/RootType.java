// automatically generated by the FlatBuffers compiler, do not modify

package com.google.flatbuffers.test;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class RootType extends Table {
  public static RootType getRootAsRootType(ByteBuffer _bb) { return getRootAsRootType(_bb, new RootType()); }
  public static RootType getRootAsRootType(ByteBuffer _bb, RootType obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public RootType __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Person items(int j) { return items(new Person(), j); }
  public Person items(Person obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int itemsLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public int stateid() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public long time() { int o = __offset(8); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }

  public static int createRootType(FlatBufferBuilder builder,
      int itemsOffset,
      int stateid,
      long time) {
    builder.startObject(3);
    RootType.addTime(builder, time);
    RootType.addStateid(builder, stateid);
    RootType.addItems(builder, itemsOffset);
    return RootType.endRootType(builder);
  }

  public static void startRootType(FlatBufferBuilder builder) { builder.startObject(3); }
  public static void addItems(FlatBufferBuilder builder, int itemsOffset) { builder.addOffset(0, itemsOffset, 0); }
  public static int createItemsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startItemsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addStateid(FlatBufferBuilder builder, int stateid) { builder.addInt(1, stateid, 0); }
  public static void addTime(FlatBufferBuilder builder, long time) { builder.addLong(2, time, 0L); }
  public static int endRootType(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
  public static void finishRootTypeBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedRootTypeBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }
}

