// automatically generated by the FlatBuffers compiler, do not modify

package com.google.flatbuffers.test;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Person extends Table {
  public static Person getRootAsPerson(ByteBuffer _bb) { return getRootAsPerson(_bb, new Person()); }
  public static Person getRootAsPerson(ByteBuffer _bb, Person obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public Person __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int id() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public String name() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public long code() { int o = __offset(8); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public boolean isVip() { int o = __offset(10); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public Car carList(int j) { return carList(new Car(), j); }
  public Car carList(Car obj, int j) { int o = __offset(12); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int carListLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }

  public static int createPerson(FlatBufferBuilder builder,
      int id,
      int nameOffset,
      long code,
      boolean isVip,
      int carListOffset) {
    builder.startObject(5);
    Person.addCode(builder, code);
    Person.addCarList(builder, carListOffset);
    Person.addName(builder, nameOffset);
    Person.addId(builder, id);
    Person.addIsVip(builder, isVip);
    return Person.endPerson(builder);
  }

  public static void startPerson(FlatBufferBuilder builder) { builder.startObject(5); }
  public static void addId(FlatBufferBuilder builder, int id) { builder.addInt(0, id, 0); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(1, nameOffset, 0); }
  public static void addCode(FlatBufferBuilder builder, long code) { builder.addLong(2, code, 0L); }
  public static void addIsVip(FlatBufferBuilder builder, boolean isVip) { builder.addBoolean(3, isVip, false); }
  public static void addCarList(FlatBufferBuilder builder, int carListOffset) { builder.addOffset(4, carListOffset, 0); }
  public static int createCarListVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startCarListVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endPerson(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

