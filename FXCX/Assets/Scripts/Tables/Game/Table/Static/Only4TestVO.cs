// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Game.Table.Static
{

using global::System;
using global::FlatBuffers;
using System.Collections.Generic;

public struct Only4TestVO : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Only4TestVO GetRootAsOnly4TestVO(ByteBuffer _bb) { return GetRootAsOnly4TestVO(_bb, new Only4TestVO()); }
  public static Only4TestVO GetRootAsOnly4TestVO(ByteBuffer _bb, Only4TestVO obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Only4TestVO __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }

  public static Offset<Only4TestVO> CreateOnly4TestVO(FlatBufferBuilder builder,
      int Id = 0,
      StringOffset NameOffset = default(StringOffset)) {
    builder.StartObject(2);
    Only4TestVO.AddName(builder, NameOffset);
    Only4TestVO.AddId(builder, Id);
    return Only4TestVO.EndOnly4TestVO(builder);
  }

  public static void StartOnly4TestVO(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static Offset<Only4TestVO> EndOnly4TestVO(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Only4TestVO>(o);
  }
};


}
