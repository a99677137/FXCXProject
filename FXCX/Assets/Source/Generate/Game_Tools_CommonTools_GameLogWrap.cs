//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Game_Tools_CommonTools_GameLogWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Game.Tools.CommonTools.GameLog), typeof(System.Object));
		L.RegFunction("CloseLog", CloseLog);
		L.RegFunction("Debug", Debug);
		L.RegFunction("LuaDebug", LuaDebug);
		L.RegFunction("Error", Error);
		L.RegFunction("LuaError", LuaError);
		L.RegFunction("Exception", Exception);
		L.RegFunction("New", _CreateGame_Tools_CommonTools_GameLog);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("IsAutoClearGUILog", get_IsAutoClearGUILog, set_IsAutoClearGUILog);
		L.RegVar("GUIStringBulider", get_GUIStringBulider, set_GUIStringBulider);
		L.RegVar("StrLogPath", get_StrLogPath, set_StrLogPath);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateGame_Tools_CommonTools_GameLog(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Game.Tools.CommonTools.GameLog obj = new Game.Tools.CommonTools.GameLog();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Game.Tools.CommonTools.GameLog.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CloseLog(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			Game.Tools.CommonTools.GameLog.CloseLog();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Debug(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			string arg0 = ToLua.CheckString(L, 1);
			object[] arg1 = ToLua.ToParamsObject(L, 2, count - 1);
			Game.Tools.CommonTools.GameLog.Debug(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LuaDebug(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			string arg0 = ToLua.CheckString(L, 1);
			object[] arg1 = ToLua.ToParamsObject(L, 2, count - 1);
			Game.Tools.CommonTools.GameLog.LuaDebug(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Error(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			string arg0 = ToLua.CheckString(L, 1);
			object[] arg1 = ToLua.ToParamsObject(L, 2, count - 1);
			Game.Tools.CommonTools.GameLog.Error(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LuaError(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			string arg0 = ToLua.CheckString(L, 1);
			object[] arg1 = ToLua.ToParamsObject(L, 2, count - 1);
			Game.Tools.CommonTools.GameLog.LuaError(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Exception(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			string arg0 = ToLua.CheckString(L, 1);
			object[] arg1 = ToLua.ToParamsObject(L, 2, count - 1);
			Game.Tools.CommonTools.GameLog.Exception(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsAutoClearGUILog(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, Game.Tools.CommonTools.GameLog.IsAutoClearGUILog);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GUIStringBulider(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, Game.Tools.CommonTools.GameLog.GUIStringBulider);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_StrLogPath(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Game.Tools.CommonTools.GameLog.StrLogPath);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsAutoClearGUILog(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			Game.Tools.CommonTools.GameLog.IsAutoClearGUILog = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GUIStringBulider(IntPtr L)
	{
		try
		{
			System.Text.StringBuilder arg0 = (System.Text.StringBuilder)ToLua.CheckObject(L, 2, typeof(System.Text.StringBuilder));
			Game.Tools.CommonTools.GameLog.GUIStringBulider = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_StrLogPath(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			Game.Tools.CommonTools.GameLog.StrLogPath = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

